<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playerspeed = 1; //Default movement speed

one_pressed = false; //Temporary variable for preventing multiple "1" key presses from holding
two_pressed = false; //Temporary variable for preventing multiple "2" key presses from holding
nine_pressed = false; //Temporary variable for preventing multiple "9" key presses from holding

effect = 0; //This is the id for the player's current effect

canMove = true; //Allows for player movement when true

hFacing = 0; //-1 = left, 1 = right
vFacing = 1; //-1 = up, 1 = down

x += 8; //Alligns the player properly with the tiles
y += 8;

//These 3 lines make sure the player starts out not moving
target_x = x; 
target_y = y;
moving = false;

image_speed = 0; //Player's animation speed

willface = "down"; //Stores the direction the player will face after warping

dreaming = false; //Whether or not the player is in the dream world or not

special_anim = false; //Whether or not there is a special animation playing (used to prevent image_index issues)



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_index &lt; 3){
    image_index ++;
    alarm[2] = room_speed * 0.3;
    if (image_index == 2){
        audio_play_sound(snd_pinch, 0, false);
    }
}else{
    instance_create(0,0,obj_wake_up);
    //special_anim = false;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (image_index &lt; 3){
    image_index ++;
    alarm[1] = room_speed * 0.4;
}else{
    instance_create(0,0,obj_back_to_nexus);
    //special_anim = false;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canMove = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Move the player
if (target_x &gt; x){
    x+=playerspeed
    //These sections make sure the backgrounds scroll properly when the player is moving
    if (x&gt;160 &amp;&amp; x &lt;room_width-160){
        hscroll = 1;
    }else{
        hscroll = 0;
    }
}
if (target_x &lt; x){
    x-=playerspeed
    if (x&gt;160 &amp;&amp; x &lt;room_width-160){
        hscroll = -1;
    }else{
        hscroll = 0;
    }
}
if (target_y &gt; y){
    y+=playerspeed
    if (y&gt;120 &amp;&amp; y &lt;room_height-120){
        vscroll = 1
    }
}
if (target_y &lt; y){
    y-=playerspeed
    if (y&gt;120 &amp;&amp; y &lt;room_height-120){
        vscroll = -1
    }
}

//Check destination
if (target_x == x &amp;&amp; target_y == y){
    if(moving == false &amp;&amp; special_anim == false){
        image_index = 1;
    }
    moving = false;
    image_speed = 0;
    vscroll = 0;
    hscroll = 0;
}
    
//Handle input
if (canMove){
    if (keyboard_check(vk_left) &amp;&amp; !moving){
        //Check for horse effect
        if(effect == 1){
            sprite_index = spr_player_horse_left;
        }else{
            sprite_index = spr_player_left;
        }
        hFacing = -1;
        vFacing = 0;
        if(position_meeting(x-16,y,obj_solid) == false &amp;&amp; position_meeting(x-16,y,obj_npc) == false){
            moving = true;
            target_x -= 16;
            if(position_meeting(x,y,obj_stairs_left_bottom)||position_meeting(x,y,obj_stairs_left_middle)){
                target_y -=16;
            }
            if(position_meeting(x,y,obj_stairs_right_top)||position_meeting(x,y,obj_stairs_right_middle)){
                target_y +=16;
            }
            
            if(effect=1){
                image_speed = 0.06*playerspeed;
            }else{
                image_speed = 0.12*playerspeed;
            }
            
        }
    }
    if (keyboard_check(vk_right) &amp;&amp; !moving){
        if(effect == 1){
            sprite_index = spr_player_horse_right;
        }else{
            sprite_index = spr_player_right;
        }
        hFacing = 1;
        vFacing = 0;
        if(position_meeting(x+16,y,obj_solid) == false &amp;&amp; position_meeting(x+16,y,obj_npc) == false){
            moving = true;
            target_x += 16;
            if(position_meeting(x,y,obj_stairs_left_top)||position_meeting(x,y,obj_stairs_left_middle)){
                target_y +=16;
            }
            if(position_meeting(x,y,obj_stairs_right_bottom)||position_meeting(x,y,obj_stairs_right_middle)){
                target_y -=16;
            }
            if(effect=1){
                image_speed = 0.06*playerspeed;
            }else{
                image_speed = 0.12*playerspeed;
            }
        }
    }
    if (keyboard_check(vk_up) &amp;&amp; !moving){
        if(effect == 1){
            sprite_index = spr_player_horse_up;
        }else{
            sprite_index = spr_player_up;
        }
        hFacing = 0;
        vFacing = -1;
        if(position_meeting(x,y-16,obj_solid) == false &amp;&amp; position_meeting(x,y-16,obj_npc) == false){
            moving = true;
            target_y -= 16;
            if(effect=1){
                image_speed = 0.06*playerspeed;
            }else{
                image_speed = 0.12*playerspeed;
            }
            
        }
    }
    if (keyboard_check(vk_down) &amp;&amp; !moving){
        if(effect == 1){
            sprite_index = spr_player_horse_down;
        }else{
            sprite_index = spr_player_down;
        }
        hFacing = 0;
        vFacing = 1;
        if(position_meeting(x,y+16,obj_solid) == false &amp;&amp; position_meeting(x,y+16,obj_npc) == false){
            moving = true;
            target_y +=16;
            if(effect=1){
                image_speed = 0.06*playerspeed;
            }else{
                image_speed = 0.12*playerspeed;
            }
        }
    }
}

if(!keyboard_check(vk_anykey)){
    one_pressed=false;
}

depth = round((y-8)/16) * -1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dreaming == true &amp;&amp; moving == false &amp;&amp; special_anim == false){
    nine_pressed = true;
    special_anim = true;
    sprite_index = spr_pinch;
    image_index = 0;
    alarm[2] = room_speed * 0.5;
    canMove = false;
    effect = 0;
    playerspeed = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dreaming == true &amp;&amp; moving == false &amp;&amp; special_anim == false){
    two_pressed = true;
    special_anim = true;
    sprite_index = spr_potion_drink;
    image_index = 0;
    alarm[1] = room_speed * 0.5;
    canMove = false;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(one_pressed == false &amp;&amp; dreaming == true &amp;&amp; moving == false &amp;&amp; special_anim == false){
    if(playerspeed == 1){
        playerspeed = 2;
        effect = 1;
        
        if (hFacing == 1){
            sprite_index = spr_player_horse_right;
        }else if(hFacing == -1){
            sprite_index = spr_player_horse_left;
        }
        
        if (vFacing == 1){
            sprite_index = spr_player_horse_down;
        }else if(vFacing == -1){
            sprite_index = spr_player_horse_up;
        }
    }else{
        playerspeed = 1;
        effect = 0;
        
        if (hFacing == 1){
            sprite_index = spr_player_right;
        }else if(hFacing == -1){
            sprite_index = spr_player_left;
        }
        
        if (vFacing == 1){
            sprite_index = spr_player_down;
        }else if(vFacing == -1){
            sprite_index = spr_player_up;
        }
    }
    one_pressed = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// As long as the player isn't moving and there isn't already an interaction box in front of them, one can be created
if (moving == false) &amp;&amp; (position_meeting(x+(16*hFacing), y+(16*vFacing), obj_interaction_box) == false){
    instance_create(x+(16*hFacing), y+(16*vFacing), obj_interaction_box);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// As long as the player isn't moving and there isn't already an interaction box in front of them, one can be created
if (moving == false) &amp;&amp; (position_meeting(x+(16*hFacing), y+(16*vFacing), obj_interaction_box) == false){
    instance_create(x+(16*hFacing), y+(16*vFacing), obj_interaction_box);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Determines the direction the player faces after warping
if (willface == "up"){
     if(effect == 1){
            sprite_index = spr_player_horse_up;
        }else{
            sprite_index = spr_player_up;
        }
}else if (willface == "down"){
    if(effect == 1){
            sprite_index = spr_player_horse_down;
        }else{
            sprite_index = spr_player_down;
        }
}else if (willface == "left"){
    if(effect == 1){
            sprite_index = spr_player_horse_left;
        }else{
            sprite_index = spr_player_left;
        }
}else if (willface == "right"){
    if(effect == 1){
            sprite_index = spr_player_horse_right;
        }else{
            sprite_index = spr_player_right;
        }
}

if (effect == 1){
    playerspeed = 2;
}else{
    playerspeed = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
